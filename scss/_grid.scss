.container {
	box-sizing: border-box;
	margin: 0 auto;
	max-width: 100%;
	padding: $container_padding;
	width: $max_contianer_width;
	@include breakpoint(tp) {
		$container_padding: 0 20px;
		padding: $container_padding;
	}
	@include breakpoint(ml) {
		$container_padding: 0 15px;
		padding: $container_padding;
	}
}
.row {
	margin: 0 (-$gutter);
	@extend .clearfix;
}
.col {
	float: left;
	min-height: 1px;
	box-sizing: border-box;
	padding: 0 $gutter;
	position: relative;
}
// Default Grid
@for $i from 1 through $columns {
	.col-#{$i} { width: ( ( 100% / $columns ) * $i ); }
}

// Push and Pull Column
@for $i from 0 through $columns {
	@if $i == 0 {
		.col-push-#{$i} { left: auto; }
		.col-pull-#{$i} { right: auto; }
	} @else {
		.col-push-#{$i} { left: ( ( 100% / $columns ) * $i ); }
		.col-pull-#{$i} { right: ( ( 100% / $columns ) * $i ); }
	}
}

// Responsive Grid
@each $name, $width in $breakpoints {
	@media all and ( max-width: #{$width} ) {
		@for $i from 0 through $columns {
			@if $i == 0 {
				.col-#{$name}-push-#{$i} { left: auto; }
				.col-#{$name}-pull-#{$i} { right: auto; }
			} @else {
				.col-#{$name}-#{$i} { width: ( ( 100% / $columns ) * $i ); }
				.col-#{$name}-push-#{$i} { left: ( ( 100% / $columns ) * $i ); }
				.col-#{$name}-pull-#{$i} { right: ( ( 100% / $columns ) * $i ); }
			}
		}
	}
}